// Code generated by MockGen. DO NOT EDIT.
// Source: core/transport/websocket_conn.go

// Package transport is a generated GoMock package.
package transport_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// mockRawWsConn is a mock of RawWebsocketConn interface
type mockRawWsConn struct {
	ctrl     *gomock.Controller
	recorder *mockRawWsConnMockRecorder
}

// mockRawWsConnMockRecorder is the mock recorder for mockRawWsConn
type mockRawWsConnMockRecorder struct {
	mock *mockRawWsConn
}

// newMockRawWsConn creates a new mock instance
func newMockRawWsConn(ctrl *gomock.Controller) *mockRawWsConn {
	mock := &mockRawWsConn{ctrl: ctrl}
	mock.recorder = &mockRawWsConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockRawWsConn) EXPECT() *mockRawWsConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *mockRawWsConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *mockRawWsConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*mockRawWsConn)(nil).Close))
}

// SetReadDeadline mocks base method
func (m *mockRawWsConn) SetReadDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (mr *mockRawWsConnMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*mockRawWsConn)(nil).SetReadDeadline), arg0)
}

// ReadMessage mocks base method
func (m *mockRawWsConn) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage
func (mr *mockRawWsConnMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*mockRawWsConn)(nil).ReadMessage))
}

// WriteMessage mocks base method
func (m *mockRawWsConn) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage
func (mr *mockRawWsConnMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*mockRawWsConn)(nil).WriteMessage), messageType, data)
}
